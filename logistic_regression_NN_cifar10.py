# -*- coding: utf-8 -*-
"""Logistic_Regression_NN_cifar10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hee4rUuGuuR1fTNHX4jY8U6A85_0pHCp
"""

import numpy as np
from tensorflow import keras
print (keras.__version__)

from keras.datasets import cifar10

#We import data into variables and check their shape.

(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_train.shape

y_train.shape

y_train[:10]

x_train_final = x_train.reshape((-1, 3072))
x_train_final.shape

x_test_final = x_test.reshape((-1, 3072))
x_test_final.shape

x_train_final = x_train_final / 255
x_test_final = x_test_final / 255

model = keras.Sequential()
model.add(keras.layers.Dense(512, input_shape=(3072,), activation='softplus'))
model.add(keras.layers.Dense(256, activation='softplus'))
model.add(keras.layers.Dense(10, activation='softmax'))

model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

results = model.fit(
  x=x_train_final,
  y=y_train,
  shuffle=True,
  epochs=50,
  batch_size=16,
  validation_data=(x_test_final, y_test)

)

eval = model.evaluate(x=x_test_final, y=y_test)

import matplotlib.pyplot as plt

plt.plot(results.history['loss'])
plt.plot(results.history['val_loss'])
plt.legend(['Training', 'Validation'])
plt.title('Training and Validation Losses')
plt.xlabel('epoch')
plt.ylabel('Losses')

plt.plot(results.history['accuracy'])
plt.plot(results.history['val_accuracy'])
plt.legend(['Training', 'Validation'])
plt.title('Training and Validation accuracy')
plt.xlabel('epoch')
plt.ylabel('Accuracy')

model.summary()