# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sw-VuphDzKUbXTaQbKKLYgU-fZEbDeem
"""

import numpy as np 
import pandas as pd
from tensorflow import keras
import matplotlib.pyplot as plt

df = pd.read_csv('housepricedata.csv')
df

df.shape

df.info()

df.duplicated().sum()

df.drop_duplicates(inplace = True)

df.duplicated().sum().any()

X = df.iloc[:, :10].values
y = df.iloc[:, 10].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

from collections import Counter 
print(X_train.shape)
print(Counter(y_train))

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()

X_train_scaled = sc_X.fit_transform(X_train) 
X_test_scaled = sc_X.transform(X_test)

model = keras.Sequential()
model.add(keras.layers.Dense(32, input_shape=(10,), activation='softplus'))
# model.add(keras.layers.Dense(32, activation='softplus'))
model.add(keras.layers.Dense(16, activation='softplus'))
model.add(keras.layers.Dense(1, activation='sigmoid'))

# model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.compile(optimizer='sgd', loss='binary_crossentropy', metrics=['binary_accuracy'])

results = model.fit(
  x=X_train_scaled,
  y=y_train,
  shuffle=True,
  epochs=30,
  batch_size=16,
  validation_data=(X_test_scaled, y_test)

)

eval = model.evaluate(x=X_test_scaled, y=y_test)

plt.plot(results.history['loss'])
plt.plot(results.history['val_loss'])
plt.legend(['Training', 'Validation'])
plt.title('Training and Validation Losses')
plt.xlabel('epoch')
plt.ylabel('Losses')

# plt.plot(results.history['accuracy'])
# plt.plot(results.history['val_accuracy'])
# plt.legend(['Training', 'Validation'])
# plt.title('Training and Validation accuracy')
# plt.xlabel('epoch')
# plt.ylabel('Accuracy')

plt.plot(results.history['binary_accuracy'])
plt.plot(results.history['val_binary_accuracy'])
plt.legend(['Training', 'Validation'])
plt.title('Training and Validation accuarcy')
plt.xlabel('epoch')
plt.ylabel('accuarcy')

model.summary()